generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String                 @id @default(uuid())
  email                       String                 @unique
  password                    String
  fullName                    String
  role                        String
  createdAt                   DateTime               @default(now())
  department                  String?
  active                      Boolean                @default(true)
  capacity                    Int                    @default(20)
  departmentId                String?
  serviceType                 String?
  teamLeaderId                String?
  AlertLog                    AlertLog[]
  AuditLog                    AuditLog[]
  bsLogs                      BSLog[]
  chargeCompteBordereaux      Bordereau[]            @relation("ChargeCompteBordereaux")
  bordereauxCurrentHandler    Bordereau[]            @relation("CurrentHandlerBordereaux")
  bordereauxTeam              Bordereau[]            @relation("TeamBordereaux")
  ownerBulletinSoins          BulletinSoin[]         @relation("OwnerBulletinSoins")
  processedBulletinSoins      BulletinSoin[]         @relation("ProcessedByBulletinSoins")
  chargeCompteClients         Client[]               @relation("ChargeCompte")
  Contract                    Contract[]             @relation("ManagerContracts")
  contractsAsTeamLeader       Contract[]             @relation("ContractTeamLeader")
  ContractHistory             ContractHistory[]
  courriers                   Courrier[]             @relation("UserCourriers")
  documents                   Document[]             @relation("UserDocuments")
  // NEW: Document assignment relations
  assignedDocuments           Document[]             @relation("AssignedDocuments")
  assignedByDocuments         Document[]             @relation("AssignedByDocuments")
  Feedback                    Feedback[]
  gecTemplatesCreated         GecTemplate[]          @relation("GecTemplateCreator")
  notifications               Notification[]
  OCRLog                      OCRLog[]
  PasswordResetToken          PasswordResetToken[]
  reclamations                Reclamation[]          @relation("HandlerReclamations")
  reclamationsCreated         Reclamation[]          @relation("CreatorReclamations")
  reclamationHistories        ReclamationHistory[]   @relation("UserReclamationHistories")
  ledTeamStructures           TeamStructure[]        @relation("TeamStructureLeader")
  assignedTraitementHistories TraitementHistory[]    @relation("AssignedTraitementHistories")
  traitementHistory           TraitementHistory[]    @relation("UserTraitementHistory")
  departmentRef               Department?            @relation("UserDepartment", fields: [departmentId], references: [id])
  teamLeader                  User?                  @relation("TeamLeader", fields: [teamLeaderId], references: [id])
  teamMembers                 User[]                 @relation("TeamLeader")
  virements                   Virement[]             @relation("UserVirements")
  WorkflowAssignment          WorkflowAssignment[]
  workflowNotifications       WorkflowNotification[]
  clientsManaged              Client[]               @relation("ClientGestionnaires")
  clientReclamations          Reclamation[]          @relation("ClientReclamations")
  bordereaux                  Bordereau[]            @relation("UserBordereaux")
  aiLearning                  AILearning[]           @relation("UserAILearning")
  performanceAnalyses         PerformanceAnalysis[]  @relation("UserPerformanceAnalysis")
  // NEW: Document assignment history relations
  assignedToHistory           DocumentAssignmentHistory[] @relation("AssignedToHistory")
  assignedByHistory           DocumentAssignmentHistory[] @relation("AssignedByHistory")
  fromUserHistory             DocumentAssignmentHistory[] @relation("FromUserHistory")
}

model Process {
  id           String        @id @default(uuid())
  name         String
  description  String?
  reclamations Reclamation[] @relation("ProcessReclamations")
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  details   Json?
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model AiOutput {
  id         String   @id @default(uuid())
  endpoint   String
  inputData  Json
  result     Json
  userId     String
  confidence Decimal? @db.Decimal(5, 4)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([endpoint])
  @@index([userId])
  @@index([createdAt])
  @@index([confidence])
  @@index([endpoint, confidence])
}

model AILearning {
  id             String   @id @default(uuid())
  analysisType   String
  inputPattern   String
  expectedOutput String
  actualOutput   String
  accuracy       Float
  feedback       Int?
  userId         String
  createdAt      DateTime @default(now())
  user           User     @relation("UserAILearning", fields: [userId], references: [id])

  @@index([analysisType, createdAt])
}

model PerformanceAnalysis {
  id              String   @id @default(uuid())
  userId          String
  analysisDate    DateTime @default(now())
  rootCauses      String?
  bottlenecks     String?
  trainingNeeds   String?
  recommendations String?
  confidence      Float
  aiGenerated     Boolean  @default(true)
  user            User     @relation("UserPerformanceAnalysis", fields: [userId], references: [id])

  @@index([userId, analysisDate])
}

model Feedback {
  id        String   @id @default(uuid())
  userId    String
  message   String
  page      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
}

model UserLockout {
  id          String    @id @default(uuid())
  email       String    @unique
  attempts    Int       @default(0)
  lockedUntil DateTime?
  updatedAt   DateTime  @updatedAt
}

model TraitementHistory {
  id           String    @id @default(uuid())
  bordereauId  String
  userId       String
  action       String
  fromStatus   String?
  toStatus     String?
  assignedToId String?
  createdAt    DateTime  @default(now())
  assignedTo   User?     @relation("AssignedTraitementHistories", fields: [assignedToId], references: [id])
  bordereau    Bordereau @relation(fields: [bordereauId], references: [id])
  user         User      @relation("UserTraitementHistory", fields: [userId], references: [id])
}

model Bordereau {
  id                       String                 @id @default(uuid())
  reference                String                 @unique
  clientId                 String
  contractId               String?
  dateReception            DateTime
  dateDebutScan            DateTime?
  dateFinScan              DateTime?
  dateReceptionSante       DateTime?
  dateCloture              DateTime?
  dateDepotVirement        DateTime?
  dateExecutionVirement    DateTime?
  delaiReglement           Int
  statut                   Statut                 @default(EN_ATTENTE)
  nombreBS                 Int
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  currentHandlerId         String?
  teamId                   String?
  assignedToUserId         String?
  prestataireId            String?
  priority                 Int                    @default(1)
  archived                 Boolean                @default(false)
  chargeCompteId           String?
  dateLimiteTraitement     DateTime?
  dateReceptionBO          DateTime?
  dateReceptionEquipeSante DateTime?
  dateReelleCloture        DateTime?
  nombreJourTraitement     Int?
  scanStatus               String                 @default("NON_SCANNE")
  completionRate           Int                    @default(0)
  documentStatus           String?                @default("NORMAL")
  ActionLog                ActionLog[]
  AlertLog                 AlertLog[]
  chargeCompte             User?                  @relation("ChargeCompteBordereaux", fields: [chargeCompteId], references: [id])
  client                   Client                 @relation(fields: [clientId], references: [id])
  contract                 Contract?              @relation("ContractBordereaux", fields: [contractId], references: [id])
  currentHandler           User?                  @relation("CurrentHandlerBordereaux", fields: [currentHandlerId], references: [id])
  prestataire              Prestataire?           @relation("BordereauPrestataire", fields: [prestataireId], references: [id])
  team                     User?                  @relation("TeamBordereaux", fields: [teamId], references: [id])
  BordereauAuditLog        BordereauAuditLog[]
  BulletinSoin             BulletinSoin[]
  courriers                Courrier[]             @relation("BordereauCourriers")
  documents                Document[]             @relation("BordereauDocuments")
  ordresVirement           OrdreVirement[]
  reclamations             Reclamation[]
  traitementHistory        TraitementHistory[]
  virement                 Virement?              @relation("BordereauVirement")
  workflowNotifications    WorkflowNotification[]
  User                     User[]                 @relation("UserBordereaux")
}

model Prestataire {
  id         String      @id @default(uuid())
  name       String
  bordereaux Bordereau[] @relation("BordereauPrestataire")
}

model BordereauAuditLog {
  id          String    @id @default(uuid())
  bordereauId String
  action      String
  userId      String?
  details     String?
  createdAt   DateTime  @default(now())
  bordereau   Bordereau @relation(fields: [bordereauId], references: [id])
}

model Reclamation {
  id           String               @id @default(uuid())
  clientId     String
  documentId   String?
  bordereauId  String?
  type         String
  severity     String
  status       String
  description  String
  assignedToId String?
  createdById  String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  evidencePath String?
  contractId   String?
  department   String?
  processId    String?
  priority     Int                  @default(1)
  assignedTo   User?                @relation("HandlerReclamations", fields: [assignedToId], references: [id])
  bordereau    Bordereau?           @relation(fields: [bordereauId], references: [id])
  client       Client               @relation(fields: [clientId], references: [id])
  contract     Contract?            @relation(fields: [contractId], references: [id])
  createdBy    User                 @relation("CreatorReclamations", fields: [createdById], references: [id])
  document     Document?            @relation(fields: [documentId], references: [id])
  process      Process?             @relation("ProcessReclamations", fields: [processId], references: [id])
  history      ReclamationHistory[]
  User         User[]               @relation("ClientReclamations")
}

model ReclamationHistory {
  id            String      @id @default(uuid())
  reclamationId String
  userId        String
  action        String
  fromStatus    String?
  toStatus      String?
  description   String?
  createdAt     DateTime    @default(now())
  aiSuggestions Json?
  isRecurrent   Boolean?    @default(false)
  reclamation   Reclamation @relation(fields: [reclamationId], references: [id])
  user          User        @relation("UserReclamationHistories", fields: [userId], references: [id])
}

model Client {
  id                   String             @id @default(uuid())
  name                 String             @unique
  reglementDelay       Int
  reclamationDelay     Int
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  slaConfig            Json?
  address              String?
  email                String?
  phone                String?
  status               String             @default("active")
  chargeCompteId       String?
  contractDocumentPath String?
  adherents            Adherent[]
  bordereaux           Bordereau[]
  chargeCompte         User?              @relation("ChargeCompte", fields: [chargeCompteId], references: [id])
  contracts            Contract[]
  reclamations         Reclamation[]
  slaConfigurations    SlaConfiguration[]
  gestionnaires        User[]             @relation("ClientGestionnaires")
}

model Contract {
  id                  String            @id @default(uuid())
  assignedManagerId   String
  teamLeaderId        String?           // NEW: Chef d'équipe assigned to this contract
  clientId            String
  clientName          String
  createdAt           DateTime          @default(now())
  delaiReclamation    Int
  delaiReglement      Int
  documentPath        String
  escalationThreshold Int?
  updatedAt           DateTime          @updatedAt
  endDate             DateTime
  startDate           DateTime
  signature           String?
  version             Int               @default(1)
  thresholds          Json?
  bordereaux          Bordereau[]       @relation("ContractBordereaux")
  assignedManager     User              @relation("ManagerContracts", fields: [assignedManagerId], references: [id])
  teamLeader          User?             @relation("ContractTeamLeader", fields: [teamLeaderId], references: [id])
  client              Client            @relation(fields: [clientId], references: [id])
  history             ContractHistory[]
  Reclamation         Reclamation[]
}

model ContractHistory {
  id           String   @id @default(uuid())
  contractId   String
  modifiedById String
  modifiedAt   DateTime @default(now())
  changes      Json
  contract     Contract @relation(fields: [contractId], references: [id])
  modifiedBy   User     @relation(fields: [modifiedById], references: [id])
}

model Document {
  id                    String                 @id @default(uuid())
  name                  String
  type                  DocumentType           @default(BULLETIN_SOIN)
  path                  String
  uploadedAt            DateTime               @default(now())
  uploadedById          String
  bordereauId           String?
  ocrResult             Json?
  ocrText               String?
  status                DocumentStatus?
  hash                  String?                @unique
  barcodeValues         String[]
  batchId               String?
  colorMode             String?
  imprinterIds          String[]
  ingestStatus          String?
  ingestTimestamp       DateTime?
  operatorId            String?
  pageCount             Int?
  resolution            Int?
  scannerModel          String?
  // NEW: Document-level assignment fields
  assignedToUserId      String?
  assignedAt            DateTime?
  assignedByUserId      String?
  priority              Int                    @default(1)
  slaApplicable         Boolean                @default(true)
  AlertLog              AlertLog[]
  bordereau             Bordereau?             @relation("BordereauDocuments", fields: [bordereauId], references: [id])
  uploader              User                   @relation("UserDocuments", fields: [uploadedById], references: [id])
  // NEW: Document assignment relations
  assignedTo            User?                  @relation("AssignedDocuments", fields: [assignedToUserId], references: [id])
  assignedBy            User?                  @relation("AssignedByDocuments", fields: [assignedByUserId], references: [id])
  OCRLog                OCRLog[]
  reclamations          Reclamation[]
  workflowNotifications WorkflowNotification[]
  // NEW: Document assignment history
  assignmentHistory     DocumentAssignmentHistory[] @relation("DocumentAssignmentHistory")
}

model Courrier {
  id           String         @id @default(uuid())
  subject      String
  body         String
  type         CourrierType
  templateUsed String
  status       CourrierStatus
  sentAt       DateTime?
  responseAt   DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  bordereauId  String?
  uploadedById String
  bordereau    Bordereau?     @relation("BordereauCourriers", fields: [bordereauId], references: [id])
  uploader     User           @relation("UserCourriers", fields: [uploadedById], references: [id])
}

model Virement {
  id                String         @id @default(uuid())
  bordereauId       String         @unique
  montant           Float
  referenceBancaire String
  dateDepot         DateTime
  dateExecution     DateTime
  confirmed         Boolean        @default(false)
  confirmedById     String?
  confirmedAt       DateTime?
  createdAt         DateTime       @default(now())
  priority          Int            @default(1)
  bulletinSoins     BulletinSoin[] @relation("VirementBulletinSoins")
  bordereau         Bordereau      @relation("BordereauVirement", fields: [bordereauId], references: [id])
  confirmedBy       User?          @relation("UserVirements", fields: [confirmedById], references: [id])
}

model OCRLog {
  id            String   @id @default(uuid())
  documentId    String
  userId        String
  processedById String
  status        String
  error         String?
  ocrAt         DateTime
  document      Document @relation(fields: [documentId], references: [id])
  processedBy   User     @relation(fields: [processedById], references: [id])
}

model AlertLog {
  id            String     @id @default(uuid())
  bordereauId   String?
  documentId    String?
  userId        String?
  alertType     String
  alertLevel    String
  message       String
  notifiedRoles String[]
  createdAt     DateTime   @default(now())
  resolved      Boolean    @default(false)
  resolvedAt    DateTime?
  bordereau     Bordereau? @relation(fields: [bordereauId], references: [id])
  document      Document?  @relation(fields: [documentId], references: [id])
  user          User?      @relation(fields: [userId], references: [id])
}

model SyncLog {
  id       String   @id @default(uuid())
  date     DateTime @default(now())
  imported Int
  errors   Int
  details  String?
}

model BulletinSoin {
  id                String             @id @default(uuid())
  bordereauId       String
  numBs             String
  etat              String
  ownerId           String?
  processedAt       DateTime?
  codeAssure        String
  createdAt         DateTime           @default(now())
  dateCreation      DateTime
  dateMaladie       DateTime
  lien              String
  nomAssure         String
  nomBeneficiaire   String
  nomBordereau      String
  nomPrestation     String
  nomSociete        String
  observationGlobal String
  ocrText           String?
  totalPec          Float
  updatedAt         DateTime           @updatedAt
  acte              String?
  dateSoin          DateTime?
  deletedAt         DateTime?
  matricule         String?
  montant           Float?
  dueDate           DateTime?
  processedById     String?
  virementId        String?
  priority          Int                @default(1)
  logs              BSLog[]
  bordereau         Bordereau          @relation(fields: [bordereauId], references: [id])
  owner             User?              @relation("OwnerBulletinSoins", fields: [ownerId], references: [id])
  processedBy       User?              @relation("ProcessedByBulletinSoins", fields: [processedById], references: [id])
  virement          Virement?          @relation("VirementBulletinSoins", fields: [virementId], references: [id])
  items             BulletinSoinItem[]
  expertises        ExpertiseInfo[]
}

model BulletinSoinItem {
  id                    String       @id @default(uuid())
  bulletinSoinId        String
  nomProduit            String
  quantite              Int
  commentaire           String
  nomChapitre           String
  nomPrestataire        String
  datePrestation        DateTime
  typeHonoraire         String
  depense               Float
  pec                   Float
  participationAdherent Float
  message               String
  codeMessage           String
  acuiteDroite          Float
  acuiteGauche          Float
  nombreCle             String
  nbJourDepassement     Int
  bulletinSoin          BulletinSoin @relation(fields: [bulletinSoinId], references: [id])
}

model ExpertiseInfo {
  id                String       @id @default(uuid())
  bulletinSoinId    String
  isFavorable       String
  matriculeAdherent String
  numBS             String
  contrat           String
  cin               String
  vlodsphere        Float?
  vpogsphere        Float?
  prixMonture       Float?
  codification      String?
  natureActe        String?
  societe           String?
  dents             String?
  bulletinSoin      BulletinSoin @relation(fields: [bulletinSoinId], references: [id])
}

model BSLog {
  id           String       @id @default(uuid())
  userId       String
  bsId         String
  action       String
  timestamp    DateTime     @default(now())
  bulletinSoin BulletinSoin @relation(fields: [bsId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
}

model Adherent {
  id            String         @id @default(uuid())
  matricule     String
  nom           String
  prenom        String
  clientId      String
  rib           String
  statut        String         @default("ACTIF")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdById   String?
  updatedById   String?
  client        Client         @relation(fields: [clientId], references: [id])
  virementItems VirementItem[]

  @@unique([matricule, clientId])
  @@index([rib])
}

model DonneurOrdre {
  id             String          @id @default(uuid())
  nom            String
  rib            String
  banque         String
  structureTxt   String
  formatTxtType  String          @default("STRUCTURE_1")
  signaturePath  String?
  statut         String          @default("ACTIF")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  ordresVirement OrdreVirement[]
}

model OrdreVirement {
  id                 String               @id @default(uuid())
  reference          String               @unique
  donneurOrdreId     String
  bordereauId        String?
  dateCreation       DateTime             @default(now())
  dateTraitement     DateTime?
  utilisateurSante   String
  utilisateurFinance String?
  etatVirement       EtatVirement         @default(NON_EXECUTE)
  dateEtatFinal      DateTime?
  commentaire        String?
  montantTotal       Float
  nombreAdherents    Int
  fichierPdf         String?
  fichierTxt         String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  bordereau          Bordereau?           @relation(fields: [bordereauId], references: [id])
  donneurOrdre       DonneurOrdre         @relation(fields: [donneurOrdreId], references: [id])
  suiviVirements     SuiviVirement[]
  historique         VirementHistorique[]
  items              VirementItem[]
}

model VirementItem {
  id              String        @id @default(uuid())
  ordreVirementId String
  adherentId      String
  montant         Float
  statut          String        @default("VALIDE")
  erreur          String?
  createdAt       DateTime      @default(now())
  adherent        Adherent      @relation(fields: [adherentId], references: [id])
  ordreVirement   OrdreVirement @relation(fields: [ordreVirementId], references: [id])
}

model VirementHistorique {
  id              String        @id @default(uuid())
  ordreVirementId String
  action          String
  ancienEtat      String?
  nouvelEtat      String?
  utilisateurId   String?
  commentaire     String?
  dateAction      DateTime      @default(now())
  ordreVirement   OrdreVirement @relation(fields: [ordreVirementId], references: [id])
}

model TeamWorkloadConfig {
  id                  String   @id @default(uuid())
  teamId              String
  maxLoad             Int
  autoReassignEnabled Boolean  @default(true)
  overflowAction      String   @default("ROUND_ROBIN")
  alertThreshold      Int?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now())
}

model Society {
  id        String              @id @default(uuid())
  name      String              @unique
  code      String              @unique
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  donneurs  DonneurDOrdre[]
  members   Member[]
  batches   WireTransferBatch[]
}

model Member {
  id            String         @id @default(uuid())
  societyId     String
  name          String
  rib           String
  cin           String?
  address       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  society       Society        @relation(fields: [societyId], references: [id])
  wireTransfers WireTransfer[]
}

model DonneurDOrdre {
  id                String              @id @default(uuid())
  societyId         String
  name              String
  rib               String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  society           Society             @relation(fields: [societyId], references: [id])
  wireTransfers     WireTransfer[]
  WireTransferBatch WireTransferBatch[]
}

model WireTransferBatch {
  id        String                     @id @default(uuid())
  societyId String
  donneurId String
  status    WireTransferBatchStatus    @default(CREATED)
  fileName  String?
  fileType  String?
  archived  Boolean                    @default(false)
  createdAt DateTime                   @default(now())
  updatedAt DateTime                   @updatedAt
  transfers WireTransfer[]
  donneur   DonneurDOrdre              @relation(fields: [donneurId], references: [id])
  society   Society                    @relation(fields: [societyId], references: [id])
  history   WireTransferBatchHistory[]
}

model WireTransfer {
  id        String                @id @default(uuid())
  batchId   String
  memberId  String
  donneurId String
  amount    Float
  reference String
  status    String
  error     String?
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  batch     WireTransferBatch     @relation(fields: [batchId], references: [id])
  donneur   DonneurDOrdre         @relation(fields: [donneurId], references: [id])
  member    Member                @relation(fields: [memberId], references: [id])
  history   WireTransferHistory[]
}

model WireTransferBatchHistory {
  id        String                  @id @default(uuid())
  batchId   String
  status    WireTransferBatchStatus
  changedBy String?
  changedAt DateTime                @default(now())
  batch     WireTransferBatch       @relation(fields: [batchId], references: [id])
}

model WireTransferHistory {
  id         String       @id @default(uuid())
  transferId String
  status     String
  error      String?
  changedBy  String?
  changedAt  DateTime     @default(now())
  transfer   WireTransfer @relation(fields: [transferId], references: [id])
}

model WorkflowAssignment {
  id                        String                      @id @default(uuid())
  taskId                    String
  taskType                  String
  assigneeId                String
  assignedAt                DateTime                    @default(now())
  completedAt               DateTime?
  status                    String                      @default("PENDING")
  notes                     String?
  user                      User                        @relation(fields: [assigneeId], references: [id])
  WorkflowAssignmentHistory WorkflowAssignmentHistory[]
}

model Template {
  id        String   @id @default(uuid())
  name      String
  subject   String
  body      String
  variables String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GecTemplate {
  id          String   @id @default(uuid())
  name        String
  content     String
  type        String   @default("EMAIL")
  category    String   @default("General")
  isActive    Boolean  @default(true)
  usageCount  Int      @default(0)
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation("GecTemplateCreator", fields: [createdById], references: [id])
}

model WorkflowAssignmentHistory {
  id              String             @id @default(uuid())
  assignmentId    String
  updatedByUserId String?
  updatedAt       DateTime           @default(now())
  prevStatus      String?
  newStatus       String?
  prevNotes       String?
  newNotes        String?
  slaMet          Boolean?
  assignment      WorkflowAssignment @relation(fields: [assignmentId], references: [id])
}

model ActionLog {
  id          String    @id @default(uuid())
  bordereauId String
  action      String
  timestamp   DateTime  @default(now())
  details     Json?
  Bordereau   Bordereau @relation(fields: [bordereauId], references: [id])

  @@index([bordereauId])
  @@index([timestamp])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  title     String
  message   String
  data      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([read])
  @@index([createdAt])
}

model ScheduledReport {
  id            String            @id @default(uuid())
  name          String
  description   String?
  type          String            @default("dashboard")
  dataSource    String            @default("bordereaux")
  frequency     String            @default("daily")
  executionTime String            @default("08:00")
  timezone      String            @default("Europe/Paris")
  format        String            @default("pdf")
  active        Boolean           @default(true)
  recipients    String            @default("[]")
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  executions    ReportExecution[]
}

model ReportExecution {
  id          String          @id @default(uuid())
  reportId    String
  startedAt   DateTime        @default(now())
  completedAt DateTime?
  status      String          @default("running")
  fileSize    Int?
  error       String?
  report      ScheduledReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model ReportGeneration {
  id          String    @id @default(uuid())
  type        String
  format      String
  period      String
  parameters  String
  status      String    @default("generating")
  filename    String
  fileSize    Int       @default(0)
  createdAt   DateTime  @default(now())
  completedAt DateTime?
}

model EscalationRule {
  id             String   @id @default(uuid())
  name           String
  alertType      String
  severity       String
  conditions     Json?
  escalationPath Json
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([alertType])
  @@index([active])
}

model NotificationChannel {
  id         String   @id @default(uuid())
  name       String
  type       String
  config     Json
  active     Boolean  @default(true)
  priority   Int      @default(1)
  rateLimits Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([type])
  @@index([active])
}

model NotificationTemplate {
  id        String   @id @default(uuid())
  name      String
  channel   String
  subject   String?
  body      String
  variables Json
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channel])
  @@index([active])
}

model SuiviVirement {
  id                 String         @id @default(uuid())
  numeroBordereau    String
  societe            String
  dateInjection      DateTime       @default(now())
  utilisateurSante   String
  dateTraitement     DateTime?
  utilisateurFinance String?
  etatVirement       String         @default("NON_EXECUTE")
  dateEtatFinal      DateTime?
  commentaire        String?
  ordreVirementId    String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  ordreVirement      OrdreVirement? @relation(fields: [ordreVirementId], references: [id])

  @@index([numeroBordereau])
  @@index([etatVirement])
}

model WorkflowNotification {
  id          String     @id @default(uuid())
  fromService String
  toService   String
  bordereauId String?
  documentId  String?
  message     String
  type        String
  status      String     @default("PENDING")
  sentAt      DateTime   @default(now())
  readAt      DateTime?
  userId      String?
  createdAt   DateTime   @default(now())
  bordereau   Bordereau? @relation(fields: [bordereauId], references: [id])
  document    Document?  @relation(fields: [documentId], references: [id])
  user        User?      @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([type])
}

model SlaConfiguration {
  id         String   @id @default(uuid())
  clientId   String?
  moduleType String
  seuils     Json
  alertes    Json
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  client     Client?  @relation(fields: [clientId], references: [id])

  @@index([clientId])
  @@index([moduleType])
}

model Department {
  id          String   @id @default(uuid())
  name        String   @unique
  code        String   @unique
  serviceType String
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]   @relation("UserDepartment")

  @@index([serviceType])
  @@index([active])
}

model TeamStructure {
  id           String          @id @default(uuid())
  name         String
  serviceType  String
  parentTeamId String?
  leaderId     String?
  description  String?
  active       Boolean         @default(true)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  leader       User?           @relation("TeamStructureLeader", fields: [leaderId], references: [id])
  parentTeam   TeamStructure?  @relation("TeamHierarchy", fields: [parentTeamId], references: [id])
  subTeams     TeamStructure[] @relation("TeamHierarchy")

  @@index([serviceType])
}

model SystemConfiguration {
  id            String   @id @default(uuid())
  configKey     String   @unique
  configValue   Json
  description   String?
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([configKey])
}

// NEW: Document assignment history tracking
model DocumentAssignmentHistory {
  id               String      @id @default(uuid())
  documentId       String
  assignedToUserId String?
  assignedByUserId String
  fromUserId       String?
  action           String      // ASSIGNED, REASSIGNED, COMPLETED, RETURNED
  reason           String?
  createdAt        DateTime    @default(now())
  document         Document    @relation("DocumentAssignmentHistory", fields: [documentId], references: [id])
  assignedTo       User?       @relation("AssignedToHistory", fields: [assignedToUserId], references: [id])
  assignedBy       User        @relation("AssignedByHistory", fields: [assignedByUserId], references: [id])
  fromUser         User?       @relation("FromUserHistory", fields: [fromUserId], references: [id])

  @@index([documentId])
  @@index([assignedToUserId])
  @@index([createdAt])
}

enum EtatVirement {
  NON_EXECUTE
  EN_COURS_EXECUTION
  EXECUTE_PARTIELLEMENT
  REJETE
  EXECUTE
}

enum DocumentStatus {
  UPLOADED
  EN_COURS
  TRAITE
  REJETE
  RETOUR_ADMIN
}

enum Statut {
  EN_ATTENTE
  A_SCANNER
  SCAN_EN_COURS
  SCANNE
  A_AFFECTER
  ASSIGNE
  EN_COURS
  TRAITE
  PRET_VIREMENT
  VIREMENT_EN_COURS
  VIREMENT_EXECUTE
  VIREMENT_REJETE
  CLOTURE
  EN_DIFFICULTE
  PARTIEL
  MIS_EN_INSTANCE
  REJETE
}

enum CourrierType {
  REGLEMENT
  RELANCE
  RECLAMATION
  AUTRE
}

enum CourrierStatus {
  DRAFT
  SENT
  FAILED
  PENDING_RESPONSE
  RESPONDED
}

enum WireTransferBatchStatus {
  CREATED
  VALIDATED
  REJECTED
  ARCHIVED
  PROCESSED
}

// NEW: Document types enum as required
enum DocumentType {
  BULLETIN_SOIN
  COMPLEMENT_INFORMATION
  ADHESION
  RECLAMATION
  CONTRAT_AVENANT
  DEMANDE_RESILIATION
  CONVENTION_TIERS_PAYANT
}
